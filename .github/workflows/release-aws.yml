name: Deploy to aws cloud

on:
  push:
    branches: ['terraform']

jobs:

  terraform:
    name: Terraform Validation and Build
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: ${{ github.event.repository.name }}
      DOCKER_IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
      TF_VAR_ECR_REPOSITORY_NAME: ${{ github.event.repository.name }}
      TF_VAR_LAMBDA_DOCKER_IMAGE: UNSET

    steps:
      - uses: actions/checkout@v2.5.0

      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.3

      - name: Terraform init, plan
        run: |
          cd terraform

          echo "** Running Terraform Init**"
          terraform init

          echo "** Running Terraform Plan**"
          terraform plan

      - name: Terraform ecr repository
        run: |
          cd terraform

          echo "** Running Terraform Apply**"
          terraform apply -target=module.ecr -auto-approve

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push docker image to Amazon private ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -f lambda.dockerfile -t $REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .
          docker push $REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG

      - name: Terraform init, plan and apply
        env:
          TF_VAR_LAMBDA_DOCKER_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
        run: |
          cd terraform

          echo "** Running Terraform Apply**"
          terraform apply -auto-approve